const blogs = [
    {
        'id': 'cp-14',
        'slug': 'cp-14',
        'title': 'Construct Binary Tree from Inorder & Postorder',
        'description': 'Competitive Programming Problem: Construct the binary tree from the arrays of Inorder & Postorder traversals',
        'date': '2025-07-03',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-14.md',
    },
    {
        'id': 'system-design-04',
        'slug': 'system-design-04',
        'title': '03: System Design - CDNs',
        'description': 'Fourth post in the system design series, discussed about CDNs.',
        'date': '2025-07-04',
        'domains': ['system-design'],
        'filename': 'system-design/system-design-04.md',
    },
     {
        'id': 'cp-13',
        'slug': 'cp-13',
        'title': 'Construct Binary Tree from Inorder & Preorder',
        'description': 'Competitive Programming Problem: Construct the binary tree from the arrays of inorder & preorder traversals',
        'date': '2025-07-03',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-13.md',
    },
     {
        'id': 'cp-12',
        'slug': 'cp-12',
        'title': 'Check for Symmetry of a Binary Tree',
        'description': 'Competitive Programming Problem: Check whether the given binary-tree is a symmetry or not',
        'date': '2025-07-04',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-12.md',
    },
    {
        'id': 'clock-sweep',
        'slug': 'clock-sweep',
        'title': 'Clock Sweep Algorithm in PostgreSQL',
        'description': 'This blog will introduce about the Clock-Sweep Algorithm used in PG for Page replacement in buffers',
        'date': '2025-07-03',
        'domains': ['postgresql', 'algorithms'],
        'filename': 'postgres/clock-sweep.md'
    },
    {
        'id': 'cp-11',
        'slug': 'cp-11',
        'title': 'Maximum Depth of a Binary Tree',
        'description': 'Competitive Programming Problem: Find the maximum depth of a Binary Tree from root to leaf node',
        'date': '2025-07-03',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-11.md',
    },
    {
        'id': 'cp-10',
        'slug': 'cp-10',
        'title': 'Level Order Traversal',
        'description': 'Competitive Programming Problem: Given the tree, give the level wise nodes as a list',
        'date': '2025-07-03',
        'domains': ['competitive-programming', 'tree', 'tree-traversal', 'binary-tree'],
        'filename': 'competetive-programming/cp-10.md',
    },
    {
        'id': 'cp-09',
        'slug': 'cp-09',
        'title': 'Identical Trees',
        'description': 'Competitive Programming Problem: Identify whether two trees are identical or not',
        'date': '2025-07-03',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-09.md',
    },
    {
        'id': 'cp-08',
        'slug': 'cp-08',
        'title': 'Path from Root to Node in Binary Tree',
        'description': 'Competitive Programming Problem: Find the Path of a node from the root in a binary tree',
        'date': '2025-07-02',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-08.md',
    },
    {
        'id': 'cp-07',
        'slug': 'cp-07',
        'title': 'Left & Right View of a Binary Tree',
        'description': 'Competitive Programming Problem: Find the left & right view of a binary tree',
        'date': '2025-07-02',
        'domains': ['competitive-programming', 'tree', 'binary-tree'],
        'filename': 'competetive-programming/cp-07.md',
    },
    {
        'id': 'system-design-03',
        'slug': 'system-design-03',
        'title': '03: System Design - Scalability',
        'description': 'Third post in the system design series, focusing on scalability techniques.',
        'date': '2025-07-01',
        'domains': ['system-design'],
        'filename': 'system-design/system-design-03.md',
    },
    {
        'id': 'cp-06',
        'slug': 'cp-06',
        'title': 'Tree Traversal - Inorder, Preorder, Postorder',
        'description': 'Competitive Programming Problem: Implement Tree Traversal methods - Inorder, Preorder, Postorder',
        'date': '2025-07-01',
        'domains': ['competitive-programming', 'tree', 'tree-traversal', 'binary-tree'],
        'filename': 'competetive-programming/cp-06.md',
    },
    {
        'id': 'cp-05',
        'slug': 'cp-05',
        'title': 'Min Stack',
        'description': 'Competitive Programming Problem: Implement Min Stack',
        'date': '2025-06-23',
        'domains': ['competitive-programming', 'stack'],
        'filename': 'competetive-programming/cp-05.md',
    },
    {
        'id': 'cp-04',
        'slug': 'cp-04',
        'title': 'Check for Balanced Parenthesis',
        'description': 'Competitive Programming Problem: Check for Balanced Parenthesis',
        'date': '2025-06-21',
        'domains': ['competitive-programming', 'stack'],
        'filename': 'competetive-programming/cp-04.md',
    },
    {
        'id': 'cp-03',
        'slug': 'cp-03',
        'title': 'Stack - Linear Data Structure',
        'description': 'Competitive Programming Problem: Stack linear data structure implementation',
        'date': '2025-06-21',
        'domains': ['competitive-programming', 'dsa', 'stack'],
        'filename': 'competetive-programming/cp-03.md',
    },
    {
        'id': 'math-01',
        'slug': 'math-01',
        'title': 'Probability & Expected Values',
        'description': 'A comprehensive guide to understanding probability and expected values in mathematics.',
        'date': '2025-06-21',
        'domains': ['math'],
        'filename': 'math-01.md',
    },
    {
        'id': 'cp-02',
        'slug': 'cp-02',
        'title': 'Next Greater Element',
        'description': 'Competitive Programming Problem: Find the next greater element for each element in an array.',
        'date': '2025-06-20',
        'domains': ['competitive-programming', 'stack'],
        'filename': 'competetive-programming/cp-02.md',
    },
    {
        'id': 'system-design-02',
        'slug': 'system-design-02',
        'title': '02: System Design - Load Balancing',
        'description': 'Second post in the system design series, focusing on load balancing techniques.',
        'date': '2025-06-19',
        'domains': ['system-design'],
        'filename': 'system-design/system-design-02.md',
    },
    {
        'id': 'system-design-01',
        'slug': 'system-design-01',
        'title': '01: System Design - Introduction to System Design',
        'description': 'First post in the system design series, covering the basics of system design.',
        'date': '2025-06-19',
        'domains': ['system-design'],
        'filename': 'system-design/system-design-01.md',
    },
    {
        'id': 'cp-01',
        'slug': 'cp-01',
        'title': 'Maximum Subarray Sum',
        'description': 'Competitive Programming Problem: Find the maximum sum of a contiguous subarray.',
        'date': '2025-06-19',
        'domains': ['competitive-programming', 'dynamic-programming', 'array'],
        'filename': 'competetive-programming/cp-01.md',
    },
]

export default blogs;